import logging
import random
import asyncio

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)

import database as db
from config import TELEGRAM_BOT_TOKEN

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_CONTACT, MENU, QUIZ, STATS_VIEW = range(4)
QUIZ_QUESTIONS_COUNT = 10


# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ "–ø—Å–µ–≤–¥–æ-–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö" —Ñ–æ—Ä–º ---

def generate_plausible_incorrect_forms(infinitive: str) -> tuple[str, str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–µ, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤,
    –ø—Ä–∏–º–µ–Ω—è—è –∫ –Ω–∏–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤.
    –ù–∞–ø—Ä–∏–º–µ—Ä: singen -> singte, gesingt
    """
    non_separable_prefixes = ('be', 'ge', 'er', 'ver', 'zer', 'ent', 'emp', 'miss')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤—É
    if infinitive.endswith('en'):
        stem = infinitive[:-2]
    elif infinitive.endswith('n'):
        stem = infinitive[:-1]
    else:
        stem = infinitive

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Pr√§teritum
    if stem.endswith(('t', 'd', 'm', 'n')):  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è -ete
        praeteritum = stem + 'ete'
    else:
        praeteritum = stem + 'te'

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Partizip II
    partizip_ii = stem
    if stem.endswith(('t', 'd', 'm', 'n')):
        partizip_ii += 'et'
    else:
        partizip_ii += 't'

    if not infinitive.endswith('ieren') and not infinitive.startswith(non_separable_prefixes):
        partizip_ii = 'ge' + partizip_ii

    return praeteritum, partizip_ii


# --- –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ ---

def generate_answers(question_verb, all_verbs):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ 2 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞.
    –õ–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –≥–ª–∞–≥–æ–ª–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π).
    """
    verb_id, infinitive, correct_praeteritum, correct_partizip, is_irregular = question_verb

    # 2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã
    correct_answers = [
        (f"{correct_praeteritum}, {correct_partizip}", True),
        (f"{correct_partizip}, {correct_praeteritum}", True)
    ]

    incorrect_answers = []
    if is_irregular:
        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –ì–õ–ê–ì–û–õ–û–í ---
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–ø—Å–µ–≤–¥–æ-–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ" —Ñ–æ—Ä–º—ã
        inc_praet, inc_part = generate_plausible_incorrect_forms(infinitive)
        incorrect_answers.append((f"{inc_praet}, {inc_part}", False))
        incorrect_answers.append((f"{inc_part}, {inc_praet}", False))
    else:
        # --- –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–†–ê–í–ò–õ–¨–ù–´–• –ì–õ–ê–ì–û–õ–û–í ---
        # –ë–µ—Ä–µ–º —Ñ–æ—Ä–º—ã –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤
        other_verbs = [v for v in all_verbs if v[0] != verb_id]
        if len(other_verbs) >= 2:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç 1: —Ñ–æ—Ä–º—ã –æ—Ç –¥—Ä—É–≥–æ–≥–æ –≥–ª–∞–≥–æ–ª–∞
            other_verb_1 = random.choice(other_verbs)
            incorrect_answers.append((f"{other_verb_1[2]}, {other_verb_1[3]}", False))

            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç 2: —Å–º–µ—Å—å —Ñ–æ—Ä–º
            other_verb_2 = random.choice(other_verbs)
            incorrect_answers.append((f"{correct_praeteritum}, {other_verb_2[3]}", False))
        else:  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ –±–∞–∑–µ –º–∞–ª–æ –≥–ª–∞–≥–æ–ª–æ–≤
            incorrect_answers.append(("falsch, gefalscht", False))
            incorrect_answers.append(("gefalscht, falsch", False))

    # –°–æ–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    final_answers = correct_answers + incorrect_answers
    random.shuffle(final_answers)
    return final_answers


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_data = db.get_user(user.id)

    if user_data:
        await show_main_menu(update, context, text=f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!")
        return MENU
    else:
        keyboard = [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∫–≤–∏–∑ –ø–æ –Ω–µ–º–µ—Ü–∫–∏–º –≥–ª–∞–≥–æ–ª–∞–º!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. "
            "–ù–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=reply_markup,
        )
        return ASK_CONTACT


async def ask_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact = update.effective_message.contact
    user = update.effective_user

    if contact:
        db.add_user(user.id, contact.phone_number, user.first_name)
        logger.info(f"User {user.id} ({user.first_name}) registered with phone {contact.phone_number}")
        await show_main_menu(update, context, text="üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        return MENU
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.")
        return ASK_CONTACT


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∫–≤–∏–∑", callback_data="start_quiz")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    text = (
        "ü§ñ *–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã—É—á–∏—Ç—å 3 —Ñ–æ—Ä–º—ã –Ω–µ–º–µ—Ü–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤.*\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ *'–ù–∞—á–∞—Ç—å –∫–≤–∏–∑'*, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        "2Ô∏è‚É£ –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: *2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ 2 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö*.\n"
        "3Ô∏è‚É£ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç–µ –≤–µ—Ä–Ω—ã–º.\n"
        "4Ô∏è‚É£ –í —Ä–∞–∑–¥–µ–ª–µ *'–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'* –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü, –∞ —Ç–∞–∫–∂–µ —Å–±—Ä–æ—Å–∏—Ç—å –µ–≥–æ.\n\n"
        "–£–¥–∞—á–∏!"
    )

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.answer()
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')


async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    context.user_data['quiz_score'] = 0
    context.user_data['question_number'] = 1

    await ask_question(update, context)
    return QUIZ

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question_number = context.user_data['question_number']

    verbs = db.get_random_verbs(4)
    question_verb = verbs[0]

    context.user_data['current_verb'] = question_verb

    # –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ë–ù–û–í–õ–ï–ù–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
    answers = generate_answers(question_verb, verbs)
    context.user_data['answers'] = answers

    keyboard = []
    for i, (text, _) in enumerate(answers):
        keyboard.append([InlineKeyboardButton(text, callback_data=f"ans_{i}")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (f"–í–æ–ø—Ä–æ—Å {question_number}/{QUIZ_QUESTIONS_COUNT}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã Pr√§teritum –∏ Partizip II –¥–ª—è –≥–ª–∞–≥–æ–ª–∞: *{question_verb[1]}*")

    query = update.callback_query
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    answer_index = int(query.data.split('_')[1])
    answers = context.user_data.get('answers', [])
    verb_id, infinitive, praeteritum, partizip_ii, _ = context.user_data.get('current_verb')

    if not answers:
        await show_main_menu(update, context, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.")
        return MENU

    is_correct = answers[answer_index][1]

    db.log_answer(update.effective_user.id, verb_id, is_correct)

    if is_correct:
        context.user_data['quiz_score'] += 1
        result_text = f"‚úÖ –í–µ—Ä–Ω–æ!\n\n_{infinitive} - {praeteritum} - {partizip_ii}_"
    else:
        result_text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: _{infinitive} - {praeteritum} - {partizip_ii}_"

    await query.edit_message_text(text=result_text, parse_mode='Markdown')
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    await asyncio.sleep(2.5) # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –ø–∞—É–∑—É

    context.user_data['question_number'] += 1
    if context.user_data['question_number'] > QUIZ_QUESTIONS_COUNT:
        score = context.user_data['quiz_score']
        end_text = (
            f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{score} –∏–∑ {QUIZ_QUESTIONS_COUNT}* –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
        )
        await show_main_menu(update, context, text=end_text)
        return MENU
    else:
        await ask_question(update, context)
        return QUIZ

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    stats = db.get_user_stats(user_id)

    text = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"–í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ –∫–≤–∏–∑–æ–≤: *{stats['games_played']}*\n\n"
        f"*–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:*\n"
        f"  –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {stats['day']['correct']} –∏–∑ {stats['day']['total']} ({stats['day']['percentage']:.1f}%)\n\n"
        f"*–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:*\n"
        f"  –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {stats['week']['correct']} –∏–∑ {stats['week']['total']} ({stats['week']['percentage']:.1f}%)\n\n"
        f"*–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:*\n"
        f"  –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {stats['month']['correct']} –∏–∑ {stats['month']['total']} ({stats['month']['percentage']:.1f}%)"
    )

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="reset_stats_confirm")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return STATS_VIEW

async def reset_stats_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    text = "‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?*\n\n" \
           "–í—Å–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –∏ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å", callback_data="reset_stats_do")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="show_stats")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return STATS_VIEW

async def do_reset_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user_info = db.get_user(user_id)

    if user_info:
        phone_number = user_info[1]
        db.reset_statistics(user_id, phone_number)
        logger.info(f"Stats reset for user {user_id}")

        await query.edit_message_text("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")
        return await start(query, context)

    await show_main_menu(update, context, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ.")
    return MENU

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await show_main_menu(update, context, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main() -> None:
    db.init_db()
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_CONTACT: [MessageHandler(filters.CONTACT, ask_contact)],
            MENU: [
                CallbackQueryHandler(start_quiz, pattern="^start_quiz$"),
                CallbackQueryHandler(show_stats, pattern="^show_stats$"),
                CallbackQueryHandler(help_command, pattern="^help$"),
            ],
            QUIZ: [CallbackQueryHandler(handle_answer, pattern="^ans_")],
            STATS_VIEW: [
                CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"),
                CallbackQueryHandler(show_stats, pattern="^show_stats$"),
                CallbackQueryHandler(reset_stats_confirm, pattern="^reset_stats_confirm$"),
                CallbackQueryHandler(do_reset_stats, pattern="^reset_stats_do$"),
            ],
        },
        fallbacks=[
            CommandHandler("start", start),
            CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"),
            CommandHandler("cancel", cancel)
        ],
        per_message=False
    )
    application.add_handler(conv_handler)
    print("Bot started with improved quiz logic...")
    application.run_polling()

if __name__ == "__main__":
    main()